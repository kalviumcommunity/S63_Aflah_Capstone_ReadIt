{"ast":null,"code":"import subService from '../services/subs';\nconst subReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_ALL_SUBS_LIST':\n      return {\n        ...state,\n        allSubs: action.payload\n      };\n    case 'SET_TOP_SUBS_LIST':\n      return {\n        ...state,\n        topSubs: action.payload\n      };\n    case 'SUBSCRIBE_SUB_FROM_LIST':\n      return {\n        ...state,\n        topSubs: state.topSubs.map(t => t.id !== action.payload.id ? t : {\n          ...t,\n          ...action.payload.data\n        })\n      };\n    case 'ADD_NEW_SUB':\n      return {\n        ...state,\n        allSubs: [...state.allSubs, action.payload]\n      };\n    default:\n      return state;\n  }\n};\nexport const setSubList = () => {\n  return async dispatch => {\n    const subs = await subService.getAllSubreddits();\n    dispatch({\n      type: 'SET_ALL_SUBS_LIST',\n      payload: subs\n    });\n  };\n};\nexport const setTopSubsList = () => {\n  return async dispatch => {\n    const top10Subs = await subService.getTopSubreddits();\n    dispatch({\n      type: 'SET_TOP_SUBS_LIST',\n      payload: top10Subs\n    });\n  };\n};\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async dispatch => {\n    const subscriberCount = subscribedBy.length;\n    dispatch({\n      type: 'SUBSCRIBE_SUB_FROM_LIST',\n      payload: {\n        id,\n        data: {\n          subscribedBy,\n          subscriberCount\n        }\n      }\n    });\n    await subService.subscribeSub(id);\n  };\n};\nexport const addNewSub = subredditObj => {\n  return async dispatch => {\n    const createdSub = await subService.createSubreddit(subredditObj);\n    dispatch({\n      type: 'ADD_NEW_SUB',\n      payload: {\n        subredditName: createdSub.subredditName,\n        id: createdSub.id\n      }\n    });\n  };\n};\nexport default subReducer;","map":{"version":3,"names":["subService","subReducer","state","action","type","allSubs","payload","topSubs","map","t","id","data","setSubList","dispatch","subs","getAllSubreddits","setTopSubsList","top10Subs","getTopSubreddits","toggleSubscribe","subscribedBy","subscriberCount","length","subscribeSub","addNewSub","subredditObj","createdSub","createSubreddit","subredditName"],"sources":["/Users/aflahhaami/S63_Aflah_Capstone_ReadIt/client/src/reducers/subReducer.js"],"sourcesContent":["import subService from '../services/subs';\n\nconst subReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_ALL_SUBS_LIST':\n      return { ...state, allSubs: action.payload };\n    case 'SET_TOP_SUBS_LIST':\n      return { ...state, topSubs: action.payload };\n    case 'SUBSCRIBE_SUB_FROM_LIST':\n      return {\n        ...state,\n        topSubs: state.topSubs.map((t) =>\n          t.id !== action.payload.id ? t : { ...t, ...action.payload.data }\n        ),\n      };\n    case 'ADD_NEW_SUB':\n      return {\n        ...state,\n        allSubs: [...state.allSubs, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setSubList = () => {\n  return async (dispatch) => {\n    const subs = await subService.getAllSubreddits();\n\n    dispatch({\n      type: 'SET_ALL_SUBS_LIST',\n      payload: subs,\n    });\n  };\n};\n\nexport const setTopSubsList = () => {\n  return async (dispatch) => {\n    const top10Subs = await subService.getTopSubreddits();\n\n    dispatch({\n      type: 'SET_TOP_SUBS_LIST',\n      payload: top10Subs,\n    });\n  };\n};\n\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async (dispatch) => {\n    const subscriberCount = subscribedBy.length;\n\n    dispatch({\n      type: 'SUBSCRIBE_SUB_FROM_LIST',\n      payload: { id, data: { subscribedBy, subscriberCount } },\n    });\n\n    await subService.subscribeSub(id);\n  };\n};\n\nexport const addNewSub = (subredditObj) => {\n  return async (dispatch) => {\n    const createdSub = await subService.createSubreddit(subredditObj);\n\n    dispatch({\n      type: 'ADD_NEW_SUB',\n      payload: {\n        subredditName: createdSub.subredditName,\n        id: createdSub.id,\n      },\n    });\n  };\n};\n\nexport default subReducer;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,kBAAkB;AAEzC,MAAMC,UAAU,GAAGA,CAACC,KAAK,GAAG,IAAI,EAAEC,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGF,KAAK;QAAEG,OAAO,EAAEF,MAAM,CAACG;MAAQ,CAAC;IAC9C,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGJ,KAAK;QAAEK,OAAO,EAAEJ,MAAM,CAACG;MAAQ,CAAC;IAC9C,KAAK,yBAAyB;MAC5B,OAAO;QACL,GAAGJ,KAAK;QACRK,OAAO,EAAEL,KAAK,CAACK,OAAO,CAACC,GAAG,CAAEC,CAAC,IAC3BA,CAAC,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO,CAACI,EAAE,GAAGD,CAAC,GAAG;UAAE,GAAGA,CAAC;UAAE,GAAGN,MAAM,CAACG,OAAO,CAACK;QAAK,CAClE;MACF,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGT,KAAK;QACRG,OAAO,EAAE,CAAC,GAAGH,KAAK,CAACG,OAAO,EAAEF,MAAM,CAACG,OAAO;MAC5C,CAAC;IACH;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMU,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,IAAI,GAAG,MAAMd,UAAU,CAACe,gBAAgB,CAAC,CAAC;IAEhDF,QAAQ,CAAC;MACPT,IAAI,EAAE,mBAAmB;MACzBE,OAAO,EAAEQ;IACX,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAO,MAAOH,QAAQ,IAAK;IACzB,MAAMI,SAAS,GAAG,MAAMjB,UAAU,CAACkB,gBAAgB,CAAC,CAAC;IAErDL,QAAQ,CAAC;MACPT,IAAI,EAAE,mBAAmB;MACzBE,OAAO,EAAEW;IACX,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAME,eAAe,GAAGA,CAACT,EAAE,EAAEU,YAAY,KAAK;EACnD,OAAO,MAAOP,QAAQ,IAAK;IACzB,MAAMQ,eAAe,GAAGD,YAAY,CAACE,MAAM;IAE3CT,QAAQ,CAAC;MACPT,IAAI,EAAE,yBAAyB;MAC/BE,OAAO,EAAE;QAAEI,EAAE;QAAEC,IAAI,EAAE;UAAES,YAAY;UAAEC;QAAgB;MAAE;IACzD,CAAC,CAAC;IAEF,MAAMrB,UAAU,CAACuB,YAAY,CAACb,EAAE,CAAC;EACnC,CAAC;AACH,CAAC;AAED,OAAO,MAAMc,SAAS,GAAIC,YAAY,IAAK;EACzC,OAAO,MAAOZ,QAAQ,IAAK;IACzB,MAAMa,UAAU,GAAG,MAAM1B,UAAU,CAAC2B,eAAe,CAACF,YAAY,CAAC;IAEjEZ,QAAQ,CAAC;MACPT,IAAI,EAAE,aAAa;MACnBE,OAAO,EAAE;QACPsB,aAAa,EAAEF,UAAU,CAACE,aAAa;QACvClB,EAAE,EAAEgB,UAAU,CAAChB;MACjB;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,eAAeT,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}