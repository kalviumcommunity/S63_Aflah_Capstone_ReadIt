{"ast":null,"code":"import subService from '../services/subs';\nimport postService from '../services/posts';\nconst subPageReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'FETCH_SUB':\n      return action.payload;\n    case 'LOAD_SUB_POSTS':\n      return {\n        ...state,\n        posts: {\n          ...action.payload.posts,\n          results: [...state.posts.results, ...action.payload.posts.results]\n        }\n      };\n    case 'TOGGLE_SUBPAGE_VOTE':\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          results: state.posts.results.map(p => p.id !== action.payload.id ? p : {\n            ...p,\n            ...action.payload.data\n          })\n        }\n      };\n    case 'SUBSCRIBE_SUB':\n      return {\n        ...state,\n        subDetails: {\n          ...state.subDetails,\n          ...action.payload\n        }\n      };\n    case 'EDIT_DESCRIPTION':\n      return {\n        ...state,\n        subDetails: {\n          ...state.subDetails,\n          description: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\nexport const fetchSub = (subredditName, sortBy) => {\n  return async dispatch => {\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, 1);\n    dispatch({\n      type: 'FETCH_SUB',\n      payload: sub\n    });\n  };\n};\nexport const loadSubPosts = (subredditName, sortBy, page) => {\n  return async dispatch => {\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, page);\n    dispatch({\n      type: 'LOAD_SUB_POSTS',\n      payload: sub\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n    dispatch({\n      type: 'TOGGLE_SUBPAGE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n    dispatch({\n      type: 'TOGGLE_SUBPAGE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async dispatch => {\n    const subscriberCount = subscribedBy.length;\n    dispatch({\n      type: 'SUBSCRIBE_SUB',\n      payload: {\n        subscribedBy,\n        subscriberCount\n      }\n    });\n    await subService.subscribeSub(id);\n  };\n};\nexport const editDescription = (id, description) => {\n  return async dispatch => {\n    await subService.updateDescription(id, {\n      description\n    });\n    dispatch({\n      type: 'EDIT_DESCRIPTION',\n      payload: description\n    });\n  };\n};\nexport default subPageReducer;","map":{"version":3,"names":["subService","postService","subPageReducer","state","action","type","payload","posts","results","map","p","id","data","subDetails","description","fetchSub","subredditName","sortBy","dispatch","sub","getSubreddit","loadSubPosts","page","toggleUpvote","upvotedBy","downvotedBy","pointsCount","length","upvotePost","toggleDownvote","downvotePost","toggleSubscribe","subscribedBy","subscriberCount","subscribeSub","editDescription","updateDescription"],"sources":["/Users/aflahhaami/reddish/client/src/reducers/subPageReducer.js"],"sourcesContent":["import subService from '../services/subs';\nimport postService from '../services/posts';\n\nconst subPageReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'FETCH_SUB':\n      return action.payload;\n    case 'LOAD_SUB_POSTS':\n      return {\n        ...state,\n        posts: {\n          ...action.payload.posts,\n          results: [...state.posts.results, ...action.payload.posts.results],\n        },\n      };\n    case 'TOGGLE_SUBPAGE_VOTE':\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          results: state.posts.results.map((p) =>\n            p.id !== action.payload.id ? p : { ...p, ...action.payload.data }\n          ),\n        },\n      };\n    case 'SUBSCRIBE_SUB':\n      return {\n        ...state,\n        subDetails: { ...state.subDetails, ...action.payload },\n      };\n    case 'EDIT_DESCRIPTION':\n      return {\n        ...state,\n        subDetails: { ...state.subDetails, description: action.payload },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const fetchSub = (subredditName, sortBy) => {\n  return async (dispatch) => {\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, 1);\n\n    dispatch({\n      type: 'FETCH_SUB',\n      payload: sub,\n    });\n  };\n};\n\nexport const loadSubPosts = (subredditName, sortBy, page) => {\n  return async (dispatch) => {\n    const sub = await subService.getSubreddit(subredditName, sortBy, 10, page);\n\n    dispatch({\n      type: 'LOAD_SUB_POSTS',\n      payload: sub,\n    });\n  };\n};\n\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SUBPAGE_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.upvotePost(id);\n  };\n};\n\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SUBPAGE_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.downvotePost(id);\n  };\n};\n\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async (dispatch) => {\n    const subscriberCount = subscribedBy.length;\n\n    dispatch({\n      type: 'SUBSCRIBE_SUB',\n      payload: { subscribedBy, subscriberCount },\n    });\n\n    await subService.subscribeSub(id);\n  };\n};\n\nexport const editDescription = (id, description) => {\n  return async (dispatch) => {\n    await subService.updateDescription(id, { description });\n\n    dispatch({\n      type: 'EDIT_DESCRIPTION',\n      payload: description,\n    });\n  };\n};\n\nexport default subPageReducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}