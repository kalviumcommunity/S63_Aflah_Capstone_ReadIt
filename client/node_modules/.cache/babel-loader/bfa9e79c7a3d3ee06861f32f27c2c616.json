{"ast":null,"code":"import postService from '../services/posts';\nconst postPageReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'FETCH_POST_COMMENTS':\n      return action.payload;\n    case 'CREATE_NEW_POST':\n      return action.payload;\n    case 'UPDATE_POST':\n      return action.payload;\n    case 'TOGGLE_VOTE':\n      return {\n        ...state,\n        ...action.payload\n      };\n    case 'VOTE_COMMENT':\n      return {\n        ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : {\n          ...c,\n          ...action.payload.data\n        })\n      };\n    case 'VOTE_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : {\n          ...c,\n          replies: c.replies.map(r => r.id !== action.payload.replyId ? r : {\n            ...r,\n            ...action.payload.data\n          })\n        })\n      };\n    case 'ADD_COMMENT':\n      return {\n        ...state,\n        comments: [...state.comments, action.payload]\n      };\n    case 'ADD_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : {\n          ...c,\n          replies: [...c.replies, action.payload.addedReply]\n        })\n      };\n    case 'EDIT_COMMENT':\n      return {\n        ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : {\n          ...c,\n          ...action.payload.data\n        })\n      };\n    case 'DELETE_COMMENT':\n      return {\n        ...state,\n        comments: state.comments.filter(c => c.id !== action.payload)\n      };\n    case 'EDIT_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : {\n          ...c,\n          replies: c.replies.map(r => r.id !== action.payload.replyId ? r : {\n            ...r,\n            ...action.payload.data\n          })\n        })\n      };\n    case 'DELETE_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map(c => c.id !== action.payload.commentId ? c : {\n          ...c,\n          replies: c.replies.filter(r => r.id !== action.payload.replyId)\n        })\n      };\n    case 'SORT_COMMENTS':\n      return {\n        ...state,\n        comments: state.comments.sort((a, b) => {\n          switch (action.payload) {\n            case 'new':\n              return new Date(b.createdAt) - new Date(a.createdAt);\n            case 'upvoted':\n              return b.pointsCount - a.pointsCount;\n            case 'downvoted':\n              return a.pointsCount - b.pointsCount;\n            case 'replied':\n              return b.replies.length - a.replies.length;\n            default:\n              return new Date(a.createdAt) - new Date(b.createdAt);\n          }\n        })\n      };\n    default:\n      return state;\n  }\n};\nexport const fetchPostComments = id => {\n  return async dispatch => {\n    const fetchedPost = await postService.getPostComments(id);\n    dispatch({\n      type: 'FETCH_POST_COMMENTS',\n      payload: fetchedPost\n    });\n  };\n};\nexport const createNewPost = postObject => {\n  return async dispatch => {\n    const addedPost = await postService.addNew(postObject);\n    dispatch({\n      type: 'CREATE_NEW_POST',\n      payload: addedPost\n    });\n    return addedPost.id;\n  };\n};\nexport const updatePost = (id, postObject) => {\n  return async dispatch => {\n    const updatedPost = await postService.editPost(id, postObject);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: updatedPost\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        upvotedBy,\n        pointsCount,\n        downvotedBy\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: {\n        upvotedBy,\n        pointsCount,\n        downvotedBy\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport const toggleCommentUpvote = (postId, commentId, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_COMMENT',\n      payload: {\n        commentId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvoteComment(postId, commentId);\n  };\n};\nexport const toggleCommentDownvote = (postId, commentId, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_COMMENT',\n      payload: {\n        commentId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvoteComment(postId, commentId);\n  };\n};\nexport const toggleReplyUpvote = (postId, commentId, replyId, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvoteReply(postId, commentId, replyId);\n  };\n};\nexport const toggleReplyDownvote = (postId, commentId, replyId, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n    dispatch({\n      type: 'VOTE_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvoteReply(postId, commentId, replyId);\n  };\n};\nexport const addComment = (postId, comment) => {\n  return async dispatch => {\n    const addedComment = await postService.postComment(postId, {\n      comment\n    });\n    dispatch({\n      type: 'ADD_COMMENT',\n      payload: addedComment\n    });\n  };\n};\nexport const addReply = (postId, commentId, reply) => {\n  return async dispatch => {\n    const addedReply = await postService.postReply(postId, commentId, {\n      reply\n    });\n    dispatch({\n      type: 'ADD_REPLY',\n      payload: {\n        commentId,\n        addedReply\n      }\n    });\n  };\n};\nexport const editComment = (postId, commentId, comment) => {\n  return async dispatch => {\n    await postService.updateComment(postId, commentId, {\n      comment\n    });\n    const updatedAt = Date.now();\n    dispatch({\n      type: 'EDIT_COMMENT',\n      payload: {\n        commentId,\n        data: {\n          updatedAt,\n          commentBody: comment\n        }\n      }\n    });\n  };\n};\nexport const deleteComment = (postId, commentId) => {\n  return async dispatch => {\n    await postService.removeComment(postId, commentId);\n    dispatch({\n      type: 'DELETE_COMMENT',\n      payload: commentId\n    });\n  };\n};\nexport const editReply = (postId, commentId, replyId, reply) => {\n  return async dispatch => {\n    await postService.updateReply(postId, commentId, replyId, {\n      reply\n    });\n    const updatedAt = Date.now();\n    dispatch({\n      type: 'EDIT_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: {\n          updatedAt,\n          replyBody: reply\n        }\n      }\n    });\n  };\n};\nexport const deleteReply = (postId, commentId, replyId) => {\n  return async dispatch => {\n    await postService.removeReply(postId, commentId, replyId);\n    dispatch({\n      type: 'DELETE_REPLY',\n      payload: {\n        commentId,\n        replyId\n      }\n    });\n  };\n};\nexport const sortComments = sortBy => {\n  return dispatch => {\n    dispatch({\n      type: 'SORT_COMMENTS',\n      payload: sortBy\n    });\n  };\n};\nexport default postPageReducer;","map":{"version":3,"names":["postService","postPageReducer","state","action","type","payload","comments","map","c","id","commentId","data","replies","r","replyId","addedReply","filter","sort","a","b","Date","createdAt","pointsCount","length","fetchPostComments","dispatch","fetchedPost","getPostComments","createNewPost","postObject","addedPost","addNew","updatePost","updatedPost","editPost","toggleUpvote","upvotedBy","downvotedBy","upvotePost","toggleDownvote","downvotePost","toggleCommentUpvote","postId","upvoteComment","toggleCommentDownvote","downvoteComment","toggleReplyUpvote","upvoteReply","toggleReplyDownvote","downvoteReply","addComment","comment","addedComment","postComment","addReply","reply","postReply","editComment","updateComment","updatedAt","now","commentBody","deleteComment","removeComment","editReply","updateReply","replyBody","deleteReply","removeReply","sortComments","sortBy"],"sources":["/Users/aflahhaami/S63_Aflah_Capstone_ReadIt/client/src/reducers/postCommentsReducer.js"],"sourcesContent":["import postService from '../services/posts';\n\nconst postPageReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'FETCH_POST_COMMENTS':\n      return action.payload;\n    case 'CREATE_NEW_POST':\n      return action.payload;\n    case 'UPDATE_POST':\n      return action.payload;\n    case 'TOGGLE_VOTE':\n      return { ...state, ...action.payload };\n    case 'VOTE_COMMENT':\n      return {\n        ...state,\n        comments: state.comments.map((c) =>\n          c.id !== action.payload.commentId\n            ? c\n            : { ...c, ...action.payload.data }\n        ),\n      };\n    case 'VOTE_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map((c) =>\n          c.id !== action.payload.commentId\n            ? c\n            : {\n                ...c,\n                replies: c.replies.map((r) =>\n                  r.id !== action.payload.replyId\n                    ? r\n                    : { ...r, ...action.payload.data }\n                ),\n              }\n        ),\n      };\n    case 'ADD_COMMENT':\n      return {\n        ...state,\n        comments: [...state.comments, action.payload],\n      };\n    case 'ADD_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map((c) =>\n          c.id !== action.payload.commentId\n            ? c\n            : { ...c, replies: [...c.replies, action.payload.addedReply] }\n        ),\n      };\n    case 'EDIT_COMMENT':\n      return {\n        ...state,\n        comments: state.comments.map((c) =>\n          c.id !== action.payload.commentId\n            ? c\n            : { ...c, ...action.payload.data }\n        ),\n      };\n    case 'DELETE_COMMENT':\n      return {\n        ...state,\n        comments: state.comments.filter((c) => c.id !== action.payload),\n      };\n    case 'EDIT_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map((c) =>\n          c.id !== action.payload.commentId\n            ? c\n            : {\n                ...c,\n                replies: c.replies.map((r) =>\n                  r.id !== action.payload.replyId\n                    ? r\n                    : { ...r, ...action.payload.data }\n                ),\n              }\n        ),\n      };\n    case 'DELETE_REPLY':\n      return {\n        ...state,\n        comments: state.comments.map((c) =>\n          c.id !== action.payload.commentId\n            ? c\n            : {\n                ...c,\n                replies: c.replies.filter(\n                  (r) => r.id !== action.payload.replyId\n                ),\n              }\n        ),\n      };\n    case 'SORT_COMMENTS':\n      return {\n        ...state,\n        comments: state.comments.sort((a, b) => {\n          switch (action.payload) {\n            case 'new':\n              return new Date(b.createdAt) - new Date(a.createdAt);\n            case 'upvoted':\n              return b.pointsCount - a.pointsCount;\n            case 'downvoted':\n              return a.pointsCount - b.pointsCount;\n            case 'replied':\n              return b.replies.length - a.replies.length;\n            default:\n              return new Date(a.createdAt) - new Date(b.createdAt);\n          }\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const fetchPostComments = (id) => {\n  return async (dispatch) => {\n    const fetchedPost = await postService.getPostComments(id);\n\n    dispatch({\n      type: 'FETCH_POST_COMMENTS',\n      payload: fetchedPost,\n    });\n  };\n};\n\nexport const createNewPost = (postObject) => {\n  return async (dispatch) => {\n    const addedPost = await postService.addNew(postObject);\n\n    dispatch({\n      type: 'CREATE_NEW_POST',\n      payload: addedPost,\n    });\n\n    return addedPost.id;\n  };\n};\n\nexport const updatePost = (id, postObject) => {\n  return async (dispatch) => {\n    const updatedPost = await postService.editPost(id, postObject);\n\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: updatedPost,\n    });\n  };\n};\n\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: { upvotedBy, pointsCount, downvotedBy },\n    });\n\n    await postService.upvotePost(id);\n  };\n};\n\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_VOTE',\n      payload: { upvotedBy, pointsCount, downvotedBy },\n    });\n\n    await postService.downvotePost(id);\n  };\n};\n\nexport const toggleCommentUpvote = (\n  postId,\n  commentId,\n  upvotedBy,\n  downvotedBy\n) => {\n  return async (dispatch) => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n\n    dispatch({\n      type: 'VOTE_COMMENT',\n      payload: { commentId, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.upvoteComment(postId, commentId);\n  };\n};\n\nexport const toggleCommentDownvote = (\n  postId,\n  commentId,\n  downvotedBy,\n  upvotedBy\n) => {\n  return async (dispatch) => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n\n    dispatch({\n      type: 'VOTE_COMMENT',\n      payload: { commentId, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.downvoteComment(postId, commentId);\n  };\n};\n\nexport const toggleReplyUpvote = (\n  postId,\n  commentId,\n  replyId,\n  upvotedBy,\n  downvotedBy\n) => {\n  return async (dispatch) => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n\n    dispatch({\n      type: 'VOTE_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: { upvotedBy, pointsCount, downvotedBy },\n      },\n    });\n\n    await postService.upvoteReply(postId, commentId, replyId);\n  };\n};\n\nexport const toggleReplyDownvote = (\n  postId,\n  commentId,\n  replyId,\n  downvotedBy,\n  upvotedBy\n) => {\n  return async (dispatch) => {\n    const pointsCount = upvotedBy.length - downvotedBy.length;\n\n    dispatch({\n      type: 'VOTE_REPLY',\n      payload: {\n        commentId,\n        replyId,\n        data: { upvotedBy, pointsCount, downvotedBy },\n      },\n    });\n\n    await postService.downvoteReply(postId, commentId, replyId);\n  };\n};\n\nexport const addComment = (postId, comment) => {\n  return async (dispatch) => {\n    const addedComment = await postService.postComment(postId, { comment });\n\n    dispatch({\n      type: 'ADD_COMMENT',\n      payload: addedComment,\n    });\n  };\n};\n\nexport const addReply = (postId, commentId, reply) => {\n  return async (dispatch) => {\n    const addedReply = await postService.postReply(postId, commentId, {\n      reply,\n    });\n\n    dispatch({\n      type: 'ADD_REPLY',\n      payload: { commentId, addedReply },\n    });\n  };\n};\n\nexport const editComment = (postId, commentId, comment) => {\n  return async (dispatch) => {\n    await postService.updateComment(postId, commentId, { comment });\n    const updatedAt = Date.now();\n\n    dispatch({\n      type: 'EDIT_COMMENT',\n      payload: { commentId, data: { updatedAt, commentBody: comment } },\n    });\n  };\n};\n\nexport const deleteComment = (postId, commentId) => {\n  return async (dispatch) => {\n    await postService.removeComment(postId, commentId);\n\n    dispatch({\n      type: 'DELETE_COMMENT',\n      payload: commentId,\n    });\n  };\n};\n\nexport const editReply = (postId, commentId, replyId, reply) => {\n  return async (dispatch) => {\n    await postService.updateReply(postId, commentId, replyId, { reply });\n    const updatedAt = Date.now();\n\n    dispatch({\n      type: 'EDIT_REPLY',\n      payload: { commentId, replyId, data: { updatedAt, replyBody: reply } },\n    });\n  };\n};\n\nexport const deleteReply = (postId, commentId, replyId) => {\n  return async (dispatch) => {\n    await postService.removeReply(postId, commentId, replyId);\n\n    dispatch({\n      type: 'DELETE_REPLY',\n      payload: { commentId, replyId },\n    });\n  };\n};\n\nexport const sortComments = (sortBy) => {\n  return (dispatch) => {\n    dispatch({\n      type: 'SORT_COMMENTS',\n      payload: sortBy,\n    });\n  };\n};\n\nexport default postPageReducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}