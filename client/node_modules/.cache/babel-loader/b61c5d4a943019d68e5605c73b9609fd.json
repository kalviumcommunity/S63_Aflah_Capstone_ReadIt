{"ast":null,"code":"var _jsxFileName = \"/Users/aflahhaami/reddish/client/src/components/SubForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  subredditName: yup.string().required('Required').max(20, 'Must be at most 20 characters').min(3, 'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/, 'Only alphanumeric characters allowed, no spaces/symbols'),\n  description: yup.string().required('Required').max(100, 'Must be at most 100 characters').min(3, 'Must be at least 3 characters')\n});\nconst SubForm = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n  const handleCreateSub = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(notify(`New subreddish created: r/${values.subredditName}`, 'success'));\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.formWrapper,\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      validateOnChange: true,\n      initialValues: {\n        subredditName: '',\n        description: ''\n      },\n      onSubmit: handleCreateSub,\n      validationSchema: validationSchema,\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.input,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.inputIconText,\n            color: \"primary\",\n            variant: \"h5\",\n            children: \"r/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"subredditName\",\n            type: \"text\",\n            placeholder: \"Enter name\",\n            label: \"Subreddish Name\",\n            required: true,\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.descInput,\n          children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n            className: classes.inputIcon,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"description\",\n            type: \"text\",\n            placeholder: \"Enter description\",\n            label: \"Description\",\n            required: true,\n            fullWidth: true,\n            variant: \"outlined\",\n            multiline: true,\n            rows: 2,\n            maxRows: Infinity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"secondary\",\n          variant: \"contained\",\n          size: \"large\",\n          className: classes.submitButton,\n          disabled: isSubmitting,\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 26\n          }, this),\n          children: isSubmitting ? 'Creating' : 'Create Subreddish'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertMessage, {\n      error: error,\n      severity: \"error\",\n      clearError: () => setError(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(SubForm, \"AXAcx1Sv0BzJLZitFzTAf6zWQo4=\", false, function () {\n  return [useDispatch, useSubredditFormStyles, useHistory];\n});\n_c = SubForm;\nexport default SubForm;\nvar _c;\n$RefreshReg$(_c, \"SubForm\");","map":{"version":3,"names":["React","useState","useDispatch","useHistory","addNewSub","Formik","Form","TextInput","notify","AlertMessage","yup","getErrorMsg","useSubredditFormStyles","Button","Typography","InfoIcon","AddIcon","jsxDEV","_jsxDEV","validationSchema","object","subredditName","string","required","max","min","matches","description","SubForm","_s","error","setError","dispatch","classes","history","handleCreateSub","values","setSubmitting","push","err","className","formWrapper","children","validateOnChange","initialValues","onSubmit","isSubmitting","form","input","inputIconText","color","variant","fileName","_jsxFileName","lineNumber","columnNumber","name","type","placeholder","label","fullWidth","descInput","inputIcon","multiline","rows","maxRows","Infinity","size","submitButton","disabled","startIcon","severity","clearError","_c","$RefreshReg$"],"sources":["/Users/aflahhaami/reddish/client/src/components/SubForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst validationSchema = yup.object({\n  subredditName: yup\n    .string()\n    .required('Required')\n    .max(20, 'Must be at most 20 characters')\n    .min(3, 'Must be at least 3 characters')\n    .matches(\n      /^[a-zA-Z0-9-_]*$/,\n      'Only alphanumeric characters allowed, no spaces/symbols'\n    ),\n  description: yup\n    .string()\n    .required('Required')\n    .max(100, 'Must be at most 100 characters')\n    .min(3, 'Must be at least 3 characters'),\n});\n\nconst SubForm = () => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(\n        notify(`New subreddish created: r/${values.subredditName}`, 'success')\n      );\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <div className={classes.formWrapper}>\n      <Formik\n        validateOnChange={true}\n        initialValues={{ subredditName: '', description: '' }}\n        onSubmit={handleCreateSub}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting }) => (\n          <Form className={classes.form}>\n            <div className={classes.input}>\n              <Typography\n                className={classes.inputIconText}\n                color=\"primary\"\n                variant=\"h5\"\n              >\n                r/\n              </Typography>\n              <TextInput\n                name=\"subredditName\"\n                type=\"text\"\n                placeholder=\"Enter name\"\n                label=\"Subreddish Name\"\n                required\n                fullWidth\n              />\n            </div>\n            <div className={classes.descInput}>\n              <InfoIcon className={classes.inputIcon} color=\"primary\" />\n              <TextInput\n                name=\"description\"\n                type=\"text\"\n                placeholder=\"Enter description\"\n                label=\"Description\"\n                required\n                fullWidth\n                variant=\"outlined\"\n                multiline\n                rows={2}\n                maxRows={Infinity}\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"contained\"\n              size=\"large\"\n              className={classes.submitButton}\n              disabled={isSubmitting}\n              startIcon={<AddIcon />}\n            >\n              {isSubmitting ? 'Creating' : 'Create Subreddish'}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <AlertMessage\n        error={error}\n        severity=\"error\"\n        clearError={() => setError(null)}\n      />\n    </div>\n  );\n};\n\nexport default SubForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}